% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/util.R
\name{sd_store_value}
\alias{sd_store_value}
\title{Store a value in the survey data}
\usage{
sd_store_value(value, id = NULL, db = NULL)
}
\arguments{
\item{value}{The value to be stored. This can be any R object that can be
coerced to a character string.}

\item{id}{(Optional) Character string. The id (name) of the value in the
data. If not provided, the name of the \code{value} variable will be used.}

\item{db}{(Optional) Database connection object created with sd_db_connect().
If provided, enables session persistence. If not provided, will automatically
look for a variable named 'db' in the calling environment, or fall back to
the database connection from the session.}
}
\value{
The value that was stored (either the new value or existing value
from database if session persistence applies). This allows the function
to be used in variable assignments.
}
\description{
This function allows storing additional values to be included in the survey
data, such as respondent IDs or other metadata. When a database connection
is provided, it implements session persistence - if a value already exists
for the current session, storage is skipped to maintain consistency across
page refreshes.
}
\examples{
if (interactive()) {
  library(surveydown)

  # Get path to example survey file
  survey_path <- system.file("examples", "sd_ui.qmd",
                             package = "surveydown")

  # Copy to a temporary directory
  temp_dir <- tempdir()
  file.copy(survey_path, file.path(temp_dir, "basic_survey.qmd"))
  orig_dir <- getwd()
  setwd(temp_dir)

  # Define a minimal server
  server <- function(input, output, session) {
    # Set up database connection
    db <- sd_db_connect()

    # Generate and store values with session persistence
    respondentID <- sd_store_value(sample(1:1000, 1), "respID", db)
    completion_code <- sd_store_value(sample(0:9, 6, replace = TRUE), "completion_code", db)

    # The function returns the stored value (new or existing from database)
    # This ensures session persistence across page refreshes

    # Backward compatibility - works without db parameter too
    some_value <- sd_store_value(42, "some_value")

    sd_server()
  }

  # Run the app
  shiny::shinyApp(ui = sd_ui(), server = server)

  # Clean up
  setwd(orig_dir)
}

}
