% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/util.R
\name{sd_sample}
\alias{sd_sample}
\title{Session-aware Sampling Function}
\usage{
sd_sample(x, size = 1, replace = FALSE, prob = NULL, id = NULL)
}
\arguments{
\item{x}{A vector of one or more elements from which to choose, or a positive integer.}

\item{size}{A non-negative integer giving the number of items to choose. Defaults to 1.}

\item{replace}{Should sampling be with replacement? Defaults to FALSE.}

\item{prob}{A vector of probability weights for obtaining the elements of the vector
being sampled. Defaults to NULL (uniform probabilities).}

\item{id}{A character string specifying a unique identifier for this sampling operation.
If not provided, a default ID based on the call will be generated. Use different IDs
if you have multiple \code{sd_sample()} calls that should be independent.}
}
\value{
A vector of length \code{size} with elements drawn from \code{x}, consistent
across page refreshes for the same session.
}
\description{
This function performs sampling that persists across page refreshes within the same
user session. Unlike the base \code{sample()} function which generates new random values
each time it's called, \code{sd_sample()} will return the same sampled value for a given
session, ensuring consistency when users refresh survey pages.
}
\details{
The function works by:
\enumerate{
\item Checking if a sampled value already exists in the database for the current session
\item If found, returns the existing value to maintain consistency
\item If not found, performs new sampling and stores the result
}

This is particularly useful in survey applications where you want to maintain
consistent randomization (e.g., same choice options, same experimental conditions)
even when users refresh the page.

\strong{Important}: This function must be called within a Shiny reactive context
(i.e., inside a server function) as it needs access to session data and database
connections.
}
\examples{
if (interactive()) {
  # In a surveydown server function:
  server <- function(input, output, session) {
    # Use database connection for the session
    sd_use_db(db)
    
    # Sample a single respondent ID
    respondentID <- sd_sample(design$respID)

    # Sample multiple items with custom ID
    selected_questions <- sd_sample(question_pool, size = 5, id = "question_selection")

    # Sample with probabilities
    treatment_group <- sd_sample(c("control", "treatment"), prob = c(0.3, 0.7), id = "treatment")
  }
}

}
